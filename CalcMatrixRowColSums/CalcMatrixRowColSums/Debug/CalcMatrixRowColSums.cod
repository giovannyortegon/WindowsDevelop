; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27048.0 

	TITLE	C:\Users\Pentester\source\repos\CalcMatrixRowColSums\CalcMatrixRowColSums\CalcMatrixRowColSums.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__6BC0FD35_vcruntime_new@h DB 01H
__A73354DD_stdlib@h DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__3736D25A_xtgmath@h DB 01H
__824D367B_cmath DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__B2D003D7_limits DB 01H
__7E39D651_iosfwd DB 01H
__CDB00636_xutility DB 01H
__C334353D_xatomic0@h DB 01H
__1CE3C767_xmemory0 DB 01H
__F007F164_stdexcept DB 01H
__C42C8B73_vcruntime_typeinfo@h DB 01H
__7B7A869E_ctype@h DB 01H
__A2E616E7_xlocinfo DB 01H
__0E7E0F59_memory DB 01H
__223B5856_xfacet DB 01H
__244BF7CC_xlocale DB 01H
__420D52D3_xcall_once@h DB 01H
__FD5040F3_system_error DB 01H
__9B0361F4_xiosbase DB 01H
__BACC91DB_xlocnum DB 01H
__D1FEDD45_ios DB 01H
__6B9C2DC0_tchar@h DB 01H
__D0C92AB1_calcmatrixrowcolsums@cpp DB 01H
__FB7583FD_xstring DB 01H
__548B1832_istream DB 01H
__375B2D08_ostream DB 01H
__F2A749D8_streambuf DB 01H
__E53366A2_utility DB 01H
__122CF1B0_xstddef DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?PrintResults@@YAXPBHHHPAH1@Z			; PrintResults
PUBLIC	?CalcMatrixRowColSumsCpp@@YAXPBHHHPAH1@Z	; CalcMatrixRowColSumsCpp
PUBLIC	_wmain
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CI@JAFGPNKH@Result?5using?5CalcMatrixRowColSu@ ; `string'
PUBLIC	??_C@_0CI@KEAAOJFK@?6?6Result?5using?5CalcMatrixRowCol@ ; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7@				; `string'
PUBLIC	??_C@_04PFFKBBE@?5?9?9?5@			; `string'
EXTRN	__imp__srand:PROC
EXTRN	__imp__rand:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	_CalcMatrixRowColSums_:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_04PFFKBBE@?5?9?9?5@
CONST	SEGMENT
??_C@_04PFFKBBE@?5?9?9?5@ DB ' -- ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KEAAOJFK@?6?6Result?5using?5CalcMatrixRowCol@
CONST	SEGMENT
??_C@_0CI@KEAAOJFK@?6?6Result?5using?5CalcMatrixRowCol@ DB 0aH, 0aH, 'Res'
	DB	'ult using CalcMatrixRowColSums_()', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JAFGPNKH@Result?5using?5CalcMatrixRowColSu@
CONST	SEGMENT
??_C@_0CI@JAFGPNKH@Result?5using?5CalcMatrixRowColSu@ DB 'Result using Ca'
	DB	'lcMatrixRowColSumsCpp()', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$char_traits@D@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 152  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __375B2D08_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 153  : 			return (_Ok);

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 154  : 			}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 135  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __375B2D08_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  0004c	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 14		 jne	 SHORT $LN1@sentry

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __375B2D08_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 120  : 			: _Sentry_base(_Ostr)

  0004c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  : 			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	74 6e		 je	 SHORT $LN2@sentry
  00082	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0008a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	8b ca		 mov	 ecx, edx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00097	3b f4		 cmp	 esi, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	85 c0		 test	 eax, eax
  000a0	74 4e		 je	 SHORT $LN2@sentry
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000aa	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ad	8b f4		 mov	 esi, esp
  000af	8b ca		 mov	 ecx, edx
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000c1	74 2d		 je	 SHORT $LN2@sentry

; 123  : 				_Ostr.tie()->flush();

  000c3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cb	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ce	8b f4		 mov	 esi, esp
  000d0	8b ca		 mov	 ecx, edx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b f4		 mov	 esi, esp
  000e1	8b c8		 mov	 ecx, eax
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000e9	3b f4		 cmp	 esi, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000f0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000f8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000fb	8b f4		 mov	 esi, esp
  000fd	8b ca		 mov	 ecx, edx
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00105	3b f4		 cmp	 esi, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 125  : 			}

  00112	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00119	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00126	59		 pop	 ecx
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __375B2D08_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00057	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00065	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00068	8b f4		 mov	 esi, esp
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	85 c0		 test	 eax, eax
  00079	74 4d		 je	 SHORT $LN3@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  00086	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  00094	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00097	8b f4		 mov	 esi, esp
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b4	8b f4		 mov	 esi, esp
  000b6	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000bc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000bf	ff d0		 call	 eax
  000c1	3b f4		 cmp	 esi, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 108  : 			}

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __375B2D08_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   : 			: _Myostr(_Ostr)

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 100  : 			if (_Myostr.rdbuf() != nullptr)

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00040	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00051	8b f4		 mov	 esi, esp
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	85 c0		 test	 eax, eax
  00062	74 4d		 je	 SHORT $LN1@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  0006f	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  0007d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00080	8b f4		 mov	 esi, esp
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009d	8b f4		 mov	 esi, esp
  0009f	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  000a5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a8	ff d0		 call	 eax
  000aa	3b f4		 cmp	 esi, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 102  : 			}

  000b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1019 : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __375B2D08_ostream
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1020 : 	_Ostr.put(_Ostr.widen('\n'));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0a		 push	 10			; 0000000aH
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00034	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00037	8b ca		 mov	 ecx, edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b f4		 mov	 esi, esp
  00048	0f b6 c0	 movzx	 eax, al
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1021 : 	_Ostr.flush();

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1022 : 	return (_Ostr);

  0006e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1023 : 	}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 790  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __375B2D08_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 791  : 	typedef char _Elem;
; 792  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 793  : 	ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 794  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 795  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0c		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00117	c5 f9 13 85 9c
	fe ff ff	 vmovlpd QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011f	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00125	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  00128	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012e	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 796  : 		? 0 : _Ostr.width() - _Count;
; 797  : 	const typename _Myos::sentry _Ok(_Ostr);

  00131	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00134	50		 push	 eax
  00135	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00138	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 798  : 
; 799  : 	if (!_Ok)

  00144	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00147	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014c	0f b6 c0	 movzx	 eax, al
  0014f	85 c0		 test	 eax, eax
  00151	75 0e		 jne	 SHORT $LN8@operator

; 800  : 		_State |= ios_base::badbit;

  00153	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00156	83 c8 04	 or	 eax, 4
  00159	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 801  : 	else

  0015c	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 802  : 		{	// state okay, insert
; 803  : 		_TRY_IO_BEGIN

  00161	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 804  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00165	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00170	8b f4		 mov	 esi, esp
  00172	8b ca		 mov	 ecx, edx
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0017a	3b f4		 cmp	 esi, esp
  0017c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00181	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00187	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00192	83 f8 40	 cmp	 eax, 64			; 00000040H
  00195	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 805  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0019b	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019d	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  001a0	83 e8 01	 sub	 eax, 1
  001a3	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a6	83 d9 00	 sbb	 ecx, 0
  001a9	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ac	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001af	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b3	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b9	7f 0a		 jg	 SHORT $LN26@operator
  001bb	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001bf	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 806  : 				if (_Traits::eq_int_type(_Traits::eof(),

  001c5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ca	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001d0	8b f4		 mov	 esi, esp
  001d2	8b ca		 mov	 ecx, edx
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001da	3b f4		 cmp	 esi, esp
  001dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e1	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e7	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ec	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ef	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f2	8b f4		 mov	 esi, esp
  001f4	8b ca		 mov	 ecx, edx
  001f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fc	3b f4		 cmp	 esi, esp
  001fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00203	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00209	8b f4		 mov	 esi, esp
  0020b	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00212	50		 push	 eax
  00213	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021f	3b f4		 cmp	 esi, esp
  00221	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00226	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022c	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00232	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00238	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0023d	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00243	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00249	52		 push	 edx
  0024a	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00256	83 c4 08	 add	 esp, 8
  00259	0f b6 c8	 movzx	 ecx, al
  0025c	85 c9		 test	 ecx, ecx
  0025e	74 0b		 je	 SHORT $LN12@operator

; 807  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 808  : 					{	// insertion failed, quit
; 809  : 					_State |= ios_base::badbit;

  00260	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00263	83 c8 04	 or	 eax, 4
  00266	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 810  : 					break;

  00269	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 811  : 					}
; 812  : 
; 813  : 		if (_State == ios_base::goodbit

  0026b	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 814  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00270	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00274	75 6e		 jne	 SHORT $LN13@operator
  00276	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00279	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00281	8b f4		 mov	 esi, esp
  00283	8b ca		 mov	 ecx, edx
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028b	3b f4		 cmp	 esi, esp
  0028d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00292	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00298	8b f4		 mov	 esi, esp
  0029a	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029d	50		 push	 eax
  0029e	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a1	51		 push	 ecx
  002a2	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a5	52		 push	 edx
  002a6	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b2	3b f4		 cmp	 esi, esp
  002b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b9	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002bf	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c5	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002cb	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002ce	75 0b		 jne	 SHORT $LN27@operator
  002d0	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d6	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d9	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 815  : 			_State |= ios_base::badbit;

  002db	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002de	83 c8 04	 or	 eax, 4
  002e1	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 816  : 
; 817  : 		if (_State == ios_base::goodbit)

  002e4	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e8	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 818  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002ee	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002f0	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f3	83 e8 01	 sub	 eax, 1
  002f6	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f9	83 d9 00	 sbb	 ecx, 0
  002fc	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002ff	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00302	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00306	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030c	7f 0a		 jg	 SHORT $LN28@operator
  0030e	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00312	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 819  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00318	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00320	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00323	8b f4		 mov	 esi, esp
  00325	8b ca		 mov	 ecx, edx
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032d	3b f4		 cmp	 esi, esp
  0032f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00334	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  0033a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00342	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00345	8b f4		 mov	 esi, esp
  00347	8b ca		 mov	 ecx, edx
  00349	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034f	3b f4		 cmp	 esi, esp
  00351	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00356	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035c	8b f4		 mov	 esi, esp
  0035e	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00365	50		 push	 eax
  00366	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00372	3b f4		 cmp	 esi, esp
  00374	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00379	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037f	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00385	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00390	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00396	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039c	52		 push	 edx
  0039d	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  003a9	83 c4 08	 add	 esp, 8
  003ac	0f b6 c8	 movzx	 ecx, al
  003af	85 c9		 test	 ecx, ecx
  003b1	74 0b		 je	 SHORT $LN15@operator

; 820  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 821  : 					{	// insertion failed, quit
; 822  : 					_State |= ios_base::badbit;

  003b3	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b6	83 c8 04	 or	 eax, 4
  003b9	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 823  : 					break;

  003bc	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 824  : 					}

  003be	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 825  : 		_Ostr.width(0);

  003c3	8b f4		 mov	 esi, esp
  003c5	6a 00		 push	 0
  003c7	6a 00		 push	 0
  003c9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ce	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d4	8b ca		 mov	 ecx, edx
  003d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003dc	3b f4		 cmp	 esi, esp
  003de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e3	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 826  : 		_CATCH_IO_(_Ostr)

  003e5	8b f4		 mov	 esi, esp
  003e7	6a 01		 push	 1
  003e9	6a 04		 push	 4
  003eb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f6	8b ca		 mov	 ecx, edx
  003f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fe	3b f4		 cmp	 esi, esp
  00400	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00405	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0040a	c3		 ret	 0
$LN19@operator:
  0040b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00412	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00414	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 827  : 		}
; 828  : 
; 829  : 	_Ostr.setstate(_State);

  0041b	8b f4		 mov	 esi, esp
  0041d	6a 00		 push	 0
  0041f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00422	50		 push	 eax
  00423	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00426	8b 11		 mov	 edx, DWORD PTR [ecx]
  00428	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00434	3b f4		 cmp	 esi, esp
  00436	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 830  : 	return (_Ostr);

  0043b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043e	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00444	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044b	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044e	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00453	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 831  : 	}

  00459	52		 push	 edx
  0045a	8b cd		 mov	 ecx, ebp
  0045c	50		 push	 eax
  0045d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00463	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00468	58		 pop	 eax
  00469	5a		 pop	 edx
  0046a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00474	59		 pop	 ecx
  00475	5f		 pop	 edi
  00476	5e		 pop	 esi
  00477	5b		 pop	 ebx
  00478	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047b	33 cd		 xor	 ecx, ebp
  0047d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00482	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00488	3b ec		 cmp	 ebp, esp
  0048a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048f	8b e5		 mov	 esp, ebp
  00491	5d		 pop	 ebp
  00492	c3		 ret	 0
  00493	90		 npad	 1
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\calcmatrixrowcolsums\calcmatrixrowcolsums\calcmatrixrowcolsums.cpp
;	COMDAT _wmain
_TEXT	SEGMENT
_col_sums2$ = -324					; size = 20
_row_sums2$ = -296					; size = 28
_col_sums1$ = -260					; size = 20
_row_sums1$ = -232					; size = 28
_j$1 = -196						; size = 4
_i$2 = -184						; size = 4
_x$ = -172						; size = 140
_ncols$ = -24						; size = 4
_nrows$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-520]
  00012	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __D0C92AB1_calcmatrixrowcolsums@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 11   : 	const int nrows = 7, ncols = 5;

  00032	c7 45 f4 07 00
	00 00		 mov	 DWORD PTR _nrows$[ebp], 7
  00039	c7 45 e8 05 00
	00 00		 mov	 DWORD PTR _ncols$[ebp], 5

; 12   : 	int x[nrows][ncols];
; 13   : 
; 14   : 	// Initialize the matrix
; 15   : 	srand(13);

  00040	8b f4		 mov	 esi, esp
  00042	6a 0d		 push	 13			; 0000000dH
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  0004a	83 c4 04	 add	 esp, 4
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 16   : 
; 17   : 	for (int i = 0; i < nrows; i++) {

  00054	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$2[ebp], 0
  0005e	eb 0f		 jmp	 SHORT $LN4@wmain
$LN2@wmain:
  00060	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _i$2[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 85 48 ff ff
	ff		 mov	 DWORD PTR _i$2[ebp], eax
$LN4@wmain:
  0006f	83 bd 48 ff ff
	ff 07		 cmp	 DWORD PTR _i$2[ebp], 7
  00076	7d 56		 jge	 SHORT $LN3@wmain

; 18   : 		for (int j = 0; j < ncols; j++)

  00078	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$1[ebp], 0
  00082	eb 0f		 jmp	 SHORT $LN7@wmain
$LN5@wmain:
  00084	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _j$1[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 85 3c ff ff
	ff		 mov	 DWORD PTR _j$1[ebp], eax
$LN7@wmain:
  00093	83 bd 3c ff ff
	ff 05		 cmp	 DWORD PTR _j$1[ebp], 5
  0009a	7d 30		 jge	 SHORT $LN6@wmain

; 19   : 			x[i][j] = rand() % 100;

  0009c	8b f4		 mov	 esi, esp
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	99		 cdq
  000ac	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000b1	f7 f9		 idiv	 ecx
  000b3	6b 85 48 ff ff
	ff 14		 imul	 eax, DWORD PTR _i$2[ebp], 20
  000ba	8d 8c 05 54 ff
	ff ff		 lea	 ecx, DWORD PTR _x$[ebp+eax]
  000c1	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _j$1[ebp]
  000c7	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  000ca	eb b8		 jmp	 SHORT $LN5@wmain
$LN6@wmain:

; 20   : 	}

  000cc	eb 92		 jmp	 SHORT $LN2@wmain
$LN3@wmain:

; 21   :    
; 22   : 	// calculate the row and columns sums
; 23   : 	int row_sums1[nrows], col_sums1[ncols];
; 24   : 	int row_sums2[nrows], col_sums2[ncols];
; 25   : 
; 26   : 	CalcMatrixRowColSumsCpp((const int *)x, nrows, ncols, row_sums1, col_sums1);

  000ce	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _col_sums1$[ebp]
  000d4	50		 push	 eax
  000d5	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _row_sums1$[ebp]
  000db	51		 push	 ecx
  000dc	6a 05		 push	 5
  000de	6a 07		 push	 7
  000e0	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _x$[ebp]
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ?CalcMatrixRowColSumsCpp@@YAXPBHHHPAH1@Z ; CalcMatrixRowColSumsCpp
  000ec	83 c4 14	 add	 esp, 20			; 00000014H

; 27   : 	std::cout << "Result using CalcMatrixRowColSumsCpp()\n";

  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@JAFGPNKH@Result?5using?5CalcMatrixRowColSu@
  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ff	83 c4 08	 add	 esp, 8

; 28   : 	PrintResults((const int *)x, nrows, ncols, row_sums1, col_sums1);

  00102	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _col_sums1$[ebp]
  00108	50		 push	 eax
  00109	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _row_sums1$[ebp]
  0010f	51		 push	 ecx
  00110	6a 05		 push	 5
  00112	6a 07		 push	 7
  00114	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _x$[ebp]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ?PrintResults@@YAXPBHHHPAH1@Z ; PrintResults
  00120	83 c4 14	 add	 esp, 20			; 00000014H

; 29   : 
; 30   : 	CalcMatrixRowColSums_((const int *)x, nrows, ncols, row_sums2, col_sums2);

  00123	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _col_sums2$[ebp]
  00129	50		 push	 eax
  0012a	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _row_sums2$[ebp]
  00130	51		 push	 ecx
  00131	6a 05		 push	 5
  00133	6a 07		 push	 7
  00135	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _x$[ebp]
  0013b	52		 push	 edx
  0013c	e8 00 00 00 00	 call	 _CalcMatrixRowColSums_
  00141	83 c4 14	 add	 esp, 20			; 00000014H

; 31   : 	std::cout << "\n\nResult using CalcMatrixRowColSums_()\n";

  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KEAAOJFK@?6?6Result?5using?5CalcMatrixRowCol@
  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00154	83 c4 08	 add	 esp, 8

; 32   : 	PrintResults((const int *)x, nrows, ncols, row_sums2, col_sums2);

  00157	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _col_sums2$[ebp]
  0015d	50		 push	 eax
  0015e	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _row_sums2$[ebp]
  00164	51		 push	 ecx
  00165	6a 05		 push	 5
  00167	6a 07		 push	 7
  00169	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _x$[ebp]
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 ?PrintResults@@YAXPBHHHPAH1@Z ; PrintResults
  00175	83 c4 14	 add	 esp, 20			; 00000014H

; 33   : 
; 34   : 
; 35   : 	return (0);

  00178	33 c0		 xor	 eax, eax

; 36   : }

  0017a	52		 push	 edx
  0017b	8b cd		 mov	 ecx, ebp
  0017d	50		 push	 eax
  0017e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@wmain
  00184	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00189	58		 pop	 eax
  0018a	5a		 pop	 edx
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5b		 pop	 ebx
  0018e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00191	33 cd		 xor	 ecx, ebp
  00193	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00198	81 c4 08 02 00
	00		 add	 esp, 520		; 00000208H
  0019e	3b ec		 cmp	 ebp, esp
  001a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c3		 ret	 0
  001a9	0f 1f 00	 npad	 3
$LN15@wmain:
  001ac	05 00 00 00	 DD	 5
  001b0	00 00 00 00	 DD	 $LN14@wmain
$LN14@wmain:
  001b4	54 ff ff ff	 DD	 -172			; ffffff54H
  001b8	8c 00 00 00	 DD	 140			; 0000008cH
  001bc	00 00 00 00	 DD	 $LN9@wmain
  001c0	18 ff ff ff	 DD	 -232			; ffffff18H
  001c4	1c 00 00 00	 DD	 28			; 0000001cH
  001c8	00 00 00 00	 DD	 $LN10@wmain
  001cc	fc fe ff ff	 DD	 -260			; fffffefcH
  001d0	14 00 00 00	 DD	 20			; 00000014H
  001d4	00 00 00 00	 DD	 $LN11@wmain
  001d8	d8 fe ff ff	 DD	 -296			; fffffed8H
  001dc	1c 00 00 00	 DD	 28			; 0000001cH
  001e0	00 00 00 00	 DD	 $LN12@wmain
  001e4	bc fe ff ff	 DD	 -324			; fffffebcH
  001e8	14 00 00 00	 DD	 20			; 00000014H
  001ec	00 00 00 00	 DD	 $LN13@wmain
$LN13@wmain:
  001f0	63		 DB	 99			; 00000063H
  001f1	6f		 DB	 111			; 0000006fH
  001f2	6c		 DB	 108			; 0000006cH
  001f3	5f		 DB	 95			; 0000005fH
  001f4	73		 DB	 115			; 00000073H
  001f5	75		 DB	 117			; 00000075H
  001f6	6d		 DB	 109			; 0000006dH
  001f7	73		 DB	 115			; 00000073H
  001f8	32		 DB	 50			; 00000032H
  001f9	00		 DB	 0
$LN12@wmain:
  001fa	72		 DB	 114			; 00000072H
  001fb	6f		 DB	 111			; 0000006fH
  001fc	77		 DB	 119			; 00000077H
  001fd	5f		 DB	 95			; 0000005fH
  001fe	73		 DB	 115			; 00000073H
  001ff	75		 DB	 117			; 00000075H
  00200	6d		 DB	 109			; 0000006dH
  00201	73		 DB	 115			; 00000073H
  00202	32		 DB	 50			; 00000032H
  00203	00		 DB	 0
$LN11@wmain:
  00204	63		 DB	 99			; 00000063H
  00205	6f		 DB	 111			; 0000006fH
  00206	6c		 DB	 108			; 0000006cH
  00207	5f		 DB	 95			; 0000005fH
  00208	73		 DB	 115			; 00000073H
  00209	75		 DB	 117			; 00000075H
  0020a	6d		 DB	 109			; 0000006dH
  0020b	73		 DB	 115			; 00000073H
  0020c	31		 DB	 49			; 00000031H
  0020d	00		 DB	 0
$LN10@wmain:
  0020e	72		 DB	 114			; 00000072H
  0020f	6f		 DB	 111			; 0000006fH
  00210	77		 DB	 119			; 00000077H
  00211	5f		 DB	 95			; 0000005fH
  00212	73		 DB	 115			; 00000073H
  00213	75		 DB	 117			; 00000075H
  00214	6d		 DB	 109			; 0000006dH
  00215	73		 DB	 115			; 00000073H
  00216	31		 DB	 49			; 00000031H
  00217	00		 DB	 0
$LN9@wmain:
  00218	78		 DB	 120			; 00000078H
  00219	00		 DB	 0
_wmain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\calcmatrixrowcolsums\calcmatrixrowcolsums\calcmatrixrowcolsums.cpp
;	COMDAT ?CalcMatrixRowColSumsCpp@@YAXPBHHHPAH1@Z
_TEXT	SEGMENT
_temp$1 = -56						; size = 4
_j$2 = -44						; size = 4
_k$3 = -32						; size = 4
_i$4 = -20						; size = 4
_j$5 = -8						; size = 4
_x$ = 8							; size = 4
_nrows$ = 12						; size = 4
_ncols$ = 16						; size = 4
_row_sums$ = 20						; size = 4
_col_sums$ = 24						; size = 4
?CalcMatrixRowColSumsCpp@@YAXPBHHHPAH1@Z PROC		; CalcMatrixRowColSumsCpp, COMDAT

; 38   : void CalcMatrixRowColSumsCpp(const int * x, int nrows, int ncols, int * row_sums, int * col_sums) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D0C92AB1_calcmatrixrowcolsums@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   : 	for (int j = 0; j < ncols; j++)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$5[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@CalcMatrix
$LN2@CalcMatrix:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _j$5[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _j$5[ebp], eax
$LN4@CalcMatrix:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _j$5[ebp]
  0003d	3b 45 10	 cmp	 eax, DWORD PTR _ncols$[ebp]
  00040	7d 0f		 jge	 SHORT $LN3@CalcMatrix

; 40   : 		col_sums[j] = 0;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _j$5[ebp]
  00045	8b 4d 18	 mov	 ecx, DWORD PTR _col_sums$[ebp]
  00048	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
  0004f	eb e0		 jmp	 SHORT $LN2@CalcMatrix
$LN3@CalcMatrix:

; 41   : 
; 42   : 	for (int i = 0; i < nrows; i++) {

  00051	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00058	eb 09		 jmp	 SHORT $LN7@CalcMatrix
$LN5@CalcMatrix:
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  0005d	83 c0 01	 add	 eax, 1
  00060	89 45 ec	 mov	 DWORD PTR _i$4[ebp], eax
$LN7@CalcMatrix:
  00063	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  00066	3b 45 0c	 cmp	 eax, DWORD PTR _nrows$[ebp]
  00069	7d 6e		 jge	 SHORT $LN1@CalcMatrix

; 43   : 		row_sums[i] = 0;

  0006b	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  0006e	8b 4d 14	 mov	 ecx, DWORD PTR _row_sums$[ebp]
  00071	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0

; 44   : 		int k = i * ncols;

  00078	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  0007b	0f af 45 10	 imul	 eax, DWORD PTR _ncols$[ebp]
  0007f	89 45 e0	 mov	 DWORD PTR _k$3[ebp], eax

; 45   : 
; 46   : 		for (int j = 0; j < ncols; j++) {

  00082	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _j$2[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN10@CalcMatrix
$LN8@CalcMatrix:
  0008b	8b 45 d4	 mov	 eax, DWORD PTR _j$2[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 d4	 mov	 DWORD PTR _j$2[ebp], eax
$LN10@CalcMatrix:
  00094	8b 45 d4	 mov	 eax, DWORD PTR _j$2[ebp]
  00097	3b 45 10	 cmp	 eax, DWORD PTR _ncols$[ebp]
  0009a	7d 3b		 jge	 SHORT $LN9@CalcMatrix

; 47   : 			int temp = x[k + j];

  0009c	8b 45 e0	 mov	 eax, DWORD PTR _k$3[ebp]
  0009f	03 45 d4	 add	 eax, DWORD PTR _j$2[ebp]
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000a5	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000a8	89 55 c8	 mov	 DWORD PTR _temp$1[ebp], edx

; 48   : 			row_sums[i] += temp;

  000ab	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  000ae	8b 4d 14	 mov	 ecx, DWORD PTR _row_sums$[ebp]
  000b1	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b4	03 55 c8	 add	 edx, DWORD PTR _temp$1[ebp]
  000b7	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  000ba	8b 4d 14	 mov	 ecx, DWORD PTR _row_sums$[ebp]
  000bd	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 49   : 			col_sums[j] += temp;

  000c0	8b 45 d4	 mov	 eax, DWORD PTR _j$2[ebp]
  000c3	8b 4d 18	 mov	 ecx, DWORD PTR _col_sums$[ebp]
  000c6	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000c9	03 55 c8	 add	 edx, DWORD PTR _temp$1[ebp]
  000cc	8b 45 d4	 mov	 eax, DWORD PTR _j$2[ebp]
  000cf	8b 4d 18	 mov	 ecx, DWORD PTR _col_sums$[ebp]
  000d2	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 50   : 		}

  000d5	eb b4		 jmp	 SHORT $LN8@CalcMatrix
$LN9@CalcMatrix:

; 51   : 	}

  000d7	eb 81		 jmp	 SHORT $LN5@CalcMatrix
$LN1@CalcMatrix:

; 52   : }

  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000e2	3b ec		 cmp	 ebp, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
?CalcMatrixRowColSumsCpp@@YAXPBHHHPAH1@Z ENDP		; CalcMatrixRowColSumsCpp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\calcmatrixrowcolsums\calcmatrixrowcolsums\calcmatrixrowcolsums.cpp
;	COMDAT ?PrintResults@@YAXPBHHHPAH1@Z
_TEXT	SEGMENT
_i$1 = -44						; size = 4
_j$2 = -32						; size = 4
_k$3 = -20						; size = 4
_i$4 = -8						; size = 4
_x$ = 8							; size = 4
_nrows$ = 12						; size = 4
_ncols$ = 16						; size = 4
_row_sums$ = 20						; size = 4
_col_sums$ = 24						; size = 4
?PrintResults@@YAXPBHHHPAH1@Z PROC			; PrintResults, COMDAT

; 54   : void  PrintResults(const int * x, int nrows, int ncols, int * row_sums, int * col_sums) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D0C92AB1_calcmatrixrowcolsums@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 55   : 	std::cout << std::endl <<std::endl;

  00028	8b f4		 mov	 esi, esp
  0002a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0002f	8b fc		 mov	 edi, esp
  00031	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00042	3b fc		 cmp	 edi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b c8		 mov	 ecx, eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 56   : 	for (int i = 0; i < nrows; i++) {

  00058	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0005f	eb 09		 jmp	 SHORT $LN4@PrintResul
$LN2@PrintResul:
  00061	8b 45 f8	 mov	 eax, DWORD PTR _i$4[ebp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 45 f8	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@PrintResul:
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _i$4[ebp]
  0006d	3b 45 0c	 cmp	 eax, DWORD PTR _nrows$[ebp]
  00070	0f 8d 9f 00 00
	00		 jge	 $LN3@PrintResul

; 57   : 		int k = i * ncols;

  00076	8b 45 f8	 mov	 eax, DWORD PTR _i$4[ebp]
  00079	0f af 45 10	 imul	 eax, DWORD PTR _ncols$[ebp]
  0007d	89 45 ec	 mov	 DWORD PTR _k$3[ebp], eax

; 58   : 		for (int j = 0; j < ncols; j++) {

  00080	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _j$2[ebp], 0
  00087	eb 09		 jmp	 SHORT $LN7@PrintResul
$LN5@PrintResul:
  00089	8b 45 e0	 mov	 eax, DWORD PTR _j$2[ebp]
  0008c	83 c0 01	 add	 eax, 1
  0008f	89 45 e0	 mov	 DWORD PTR _j$2[ebp], eax
$LN7@PrintResul:
  00092	8b 45 e0	 mov	 eax, DWORD PTR _j$2[ebp]
  00095	3b 45 10	 cmp	 eax, DWORD PTR _ncols$[ebp]
  00098	7d 32		 jge	 SHORT $LN6@PrintResul

; 59   : 			std::cout << x[k + j] << "\t";

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  0009f	8b 45 ec	 mov	 eax, DWORD PTR _k$3[ebp]
  000a2	03 45 e0	 add	 eax, DWORD PTR _j$2[ebp]
  000a5	8b f4		 mov	 esi, esp
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000aa	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000ad	52		 push	 edx
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c7	83 c4 08	 add	 esp, 8

; 60   : 		}

  000ca	eb bd		 jmp	 SHORT $LN5@PrintResul
$LN6@PrintResul:

; 61   : 		std::cout << " -- " << row_sums[i] << std::endl;	

  000cc	8b f4		 mov	 esi, esp
  000ce	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000d3	8b fc		 mov	 edi, esp
  000d5	8b 45 f8	 mov	 eax, DWORD PTR _i$4[ebp]
  000d8	8b 4d 14	 mov	 ecx, DWORD PTR _row_sums$[ebp]
  000db	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_04PFFKBBE@?5?9?9?5@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ef	83 c4 08	 add	 esp, 8
  000f2	8b c8		 mov	 ecx, eax
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000fa	3b fc		 cmp	 edi, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b c8		 mov	 ecx, eax
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00109	3b f4		 cmp	 esi, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 62   : 	}

  00110	e9 4c ff ff ff	 jmp	 $LN2@PrintResul
$LN3@PrintResul:

; 63   : 	std::cout << std::endl;

  00115	8b f4		 mov	 esi, esp
  00117	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0011c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00128	3b f4		 cmp	 esi, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 64   : 
; 65   : 	for (int i = 0; i < ncols; i++) {

  0012f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00136	eb 09		 jmp	 SHORT $LN10@PrintResul
$LN8@PrintResul:
  00138	8b 45 d4	 mov	 eax, DWORD PTR _i$1[ebp]
  0013b	83 c0 01	 add	 eax, 1
  0013e	89 45 d4	 mov	 DWORD PTR _i$1[ebp], eax
$LN10@PrintResul:
  00141	8b 45 d4	 mov	 eax, DWORD PTR _i$1[ebp]
  00144	3b 45 10	 cmp	 eax, DWORD PTR _ncols$[ebp]
  00147	7d 2f		 jge	 SHORT $LN1@PrintResul

; 66   : 		std::cout << col_sums[i] << "\t";

  00149	68 00 00 00 00	 push	 OFFSET ??_C@_01GPOEFGEJ@?7@
  0014e	8b f4		 mov	 esi, esp
  00150	8b 45 d4	 mov	 eax, DWORD PTR _i$1[ebp]
  00153	8b 4d 18	 mov	 ecx, DWORD PTR _col_sums$[ebp]
  00156	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00159	52		 push	 edx
  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00173	83 c4 08	 add	 esp, 8

; 67   : 	}

  00176	eb c0		 jmp	 SHORT $LN8@PrintResul
$LN1@PrintResul:

; 68   : }

  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	5b		 pop	 ebx
  0017b	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00181	3b ec		 cmp	 ebp, esp
  00183	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
?PrintResults@@YAXPBHHHPAH1@Z ENDP			; PrintResults
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 540  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eof@?$char_traits@D@std@@SAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __7E39D651_iosfwd
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 541  : 		return (EOF);

  00047	83 c8 ff	 or	 eax, -1

; 542  : 		}

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$char_traits@D@std@@SAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eof@?$char_traits@D@std@@SAHXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 530  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00020	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __7E39D651_iosfwd
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 531  : 		return (_Left == _Right);

  00047	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00051	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00053	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0005d	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00069	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 532  : 		}

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 460  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$char_traits@D@std@@SAIQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __7E39D651_iosfwd
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 461  : #if _HAS_CXX17
; 462  : 		return (__builtin_strlen(_First));
; 463  : #else /* _HAS_CXX17 */
; 464  : 		return (_CSTD strlen(_First));

  00047	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _strlen
  00050	83 c4 04	 add	 esp, 4

; 465  : #endif /* _HAS_CXX17 */
; 466  : 		}

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$char_traits@D@std@@SAIQBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$char_traits@D@std@@SAIQBD@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\calcmatrixrowcolsums\calcmatrixrowcolsums\calcmatrixrowcolsums.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D0C92AB1_calcmatrixrowcolsums@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\calcmatrixrowcolsums\calcmatrixrowcolsums\calcmatrixrowcolsums.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D0C92AB1_calcmatrixrowcolsums@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
