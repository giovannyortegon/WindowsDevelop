; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27048.0 

	TITLE	C:\Users\Pentester\source\repos\ConditionCodes\ConditionCodes\ConditionCodes.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6B9C2DC0_tchar@h DB 01H
__0A398EAE_conditioncodes@cpp DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_wmain
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0CC@DCJCJGFK@SignedMinA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ ; `string'
PUBLIC	??_C@_0CD@IDDECPAO@SignedMinB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ ; `string'
PUBLIC	??_C@_0CC@GFJMMGBJ@SignedMaxA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ ; `string'
PUBLIC	??_C@_0CD@GMLGDBHE@SignedMaxB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ ; `string'
PUBLIC	??_C@_0CB@NLOIEBKD@SignedMinA?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@ ; `string'
PUBLIC	??_C@_0CC@IAAGEEMK@SignedMinB?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@ ; `string'
PUBLIC	??_C@_0BA@ENHOIMMM@SignedIsEq?3?5?$CFd?6@	; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_SignedMinA_:PROC
EXTRN	_SignedMaxA_:PROC
EXTRN	_SignedMinB_:PROC
EXTRN	_SignedMaxB_:PROC
EXTRN	_SignedIsEq_:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BA@ENHOIMMM@SignedIsEq?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BA@ENHOIMMM@SignedIsEq?3?5?$CFd?6@ DB 'SignedIsEq: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IAAGEEMK@SignedMinB?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@
CONST	SEGMENT
??_C@_0CC@IAAGEEMK@SignedMinB?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@ DB 'S'
	DB	'ignedMinB(%4d, %4d, %4d) = %4d', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NLOIEBKD@SignedMinA?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@
CONST	SEGMENT
??_C@_0CB@NLOIEBKD@SignedMinA?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@ DB 'S'
	DB	'ignedMinA(%4d, %4d, %4d) = %4d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GMLGDBHE@SignedMaxB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
CONST	SEGMENT
??_C@_0CD@GMLGDBHE@SignedMaxB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ DB 'S'
	DB	'ignedMaxB_(%4d, %4d, %4d) = %4d', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GFJMMGBJ@SignedMaxA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
CONST	SEGMENT
??_C@_0CC@GFJMMGBJ@SignedMaxA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ DB 'S'
	DB	'ignedMaxA_(%4d, %4d, %4d) = %4d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IDDECPAO@SignedMinB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
CONST	SEGMENT
??_C@_0CD@IDDECPAO@SignedMinB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ DB 'S'
	DB	'ignedMinB_(%4d, %4d, %4d) = %4d', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DCJCJGFK@SignedMinA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
CONST	SEGMENT
??_C@_0CC@DCJCJGFK@SignedMinA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@ DB 'S'
	DB	'ignedMinA_(%4d, %4d, %4d) = %4d', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\conditioncodes\conditioncodes\conditioncodes.cpp
;	COMDAT _wmain
_TEXT	SEGMENT
_smin_b$ = -80						; size = 4
_smin_a$ = -68						; size = 4
_smax_b$ = -56						; size = 4
_smax_a$ = -44						; size = 4
_c$ = -32						; size = 4
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 10   : int _tmain(int argc, _TCHAR * argv[]){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0A398EAE_conditioncodes@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 11   : 	int a, b, c;
; 12   : 	int smax_a, smax_b;
; 13   : 	int smin_a, smin_b;
; 14   : 
; 15   : 	// SignedMin example
; 16   : 	a = 2; b = 15; c = 8;

  00028	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _a$[ebp], 2
  0002f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _b$[ebp], 15	; 0000000fH
  00036	c7 45 e0 08 00
	00 00		 mov	 DWORD PTR _c$[ebp], 8

; 17   : 	smin_a = SignedMinA_(a, b, c);

  0003d	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  00040	50		 push	 eax
  00041	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _SignedMinA_
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	89 45 bc	 mov	 DWORD PTR _smin_a$[ebp], eax

; 18   : 	smin_b = SignedMinB_(a, b, c);

  00054	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  00057	50		 push	 eax
  00058	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _SignedMinB_
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	89 45 b0	 mov	 DWORD PTR _smin_b$[ebp], eax

; 19   : 	printf("SignedMinA_(%4d, %4d, %4d) = %4d\n", a, b, c, smin_a);

  0006b	8b 45 bc	 mov	 eax, DWORD PTR _smin_a$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  00076	52		 push	 edx
  00077	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DCJCJGFK@SignedMinA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  00080	e8 00 00 00 00	 call	 _printf
  00085	83 c4 14	 add	 esp, 20			; 00000014H

; 20   : 	printf("SignedMinB_(%4d, %4d, %4d) = %4d\n\n", a, b, c, smin_b);

  00088	8b 45 b0	 mov	 eax, DWORD PTR _smin_b$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  0008f	51		 push	 ecx
  00090	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  00093	52		 push	 edx
  00094	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00097	50		 push	 eax
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IDDECPAO@SignedMinB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  0009d	e8 00 00 00 00	 call	 _printf
  000a2	83 c4 14	 add	 esp, 20			; 00000014H

; 21   : 
; 22   : 	a = -3; b = -22; c = 28;

  000a5	c7 45 f8 fd ff
	ff ff		 mov	 DWORD PTR _a$[ebp], -3	; fffffffdH
  000ac	c7 45 ec ea ff
	ff ff		 mov	 DWORD PTR _b$[ebp], -22	; ffffffeaH
  000b3	c7 45 e0 1c 00
	00 00		 mov	 DWORD PTR _c$[ebp], 28	; 0000001cH

; 23   : 	smin_a = SignedMinA_(a, b, c);

  000ba	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  000c1	51		 push	 ecx
  000c2	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 _SignedMinA_
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	89 45 bc	 mov	 DWORD PTR _smin_a$[ebp], eax

; 24   : 	smin_b = SignedMinB_(a, b, c);

  000d1	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  000d8	51		 push	 ecx
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 _SignedMinB_
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e5	89 45 b0	 mov	 DWORD PTR _smin_b$[ebp], eax

; 25   : 	printf("SignedMinA_(%4d, %4d, %4d) = %4d\n", a, b, c, smin_a);

  000e8	8b 45 bc	 mov	 eax, DWORD PTR _smin_a$[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  000ef	51		 push	 ecx
  000f0	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  000f3	52		 push	 edx
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  000f7	50		 push	 eax
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DCJCJGFK@SignedMinA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  000fd	e8 00 00 00 00	 call	 _printf
  00102	83 c4 14	 add	 esp, 20			; 00000014H

; 26   : 	printf("SignedMinB_(%4d, %4d, %4d) = %4d\n\n", a, b, c, smin_b);

  00105	8b 45 b0	 mov	 eax, DWORD PTR _smin_b$[ebp]
  00108	50		 push	 eax
  00109	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  0010c	51		 push	 ecx
  0010d	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  00110	52		 push	 edx
  00111	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00114	50		 push	 eax
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IDDECPAO@SignedMinB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  0011a	e8 00 00 00 00	 call	 _printf
  0011f	83 c4 14	 add	 esp, 20			; 00000014H

; 27   : 
; 28   : 	a = 17; b = 37; c = -11;

  00122	c7 45 f8 11 00
	00 00		 mov	 DWORD PTR _a$[ebp], 17	; 00000011H
  00129	c7 45 ec 25 00
	00 00		 mov	 DWORD PTR _b$[ebp], 37	; 00000025H
  00130	c7 45 e0 f5 ff
	ff ff		 mov	 DWORD PTR _c$[ebp], -11	; fffffff5H

; 29   : 	smin_a = SignedMinA_(a, b, c);

  00137	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  0013e	51		 push	 ecx
  0013f	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  00142	52		 push	 edx
  00143	e8 00 00 00 00	 call	 _SignedMinA_
  00148	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014b	89 45 bc	 mov	 DWORD PTR _smin_a$[ebp], eax

; 30   : 	smin_b = SignedMinB_(a, b, c);

  0014e	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  00151	50		 push	 eax
  00152	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  00155	51		 push	 ecx
  00156	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  00159	52		 push	 edx
  0015a	e8 00 00 00 00	 call	 _SignedMinB_
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00162	89 45 b0	 mov	 DWORD PTR _smin_b$[ebp], eax

; 31   : 	printf("SignedMinA_(%4d, %4d, %4d) = %4d\n", a, b, c, smin_a);

  00165	8b 45 bc	 mov	 eax, DWORD PTR _smin_a$[ebp]
  00168	50		 push	 eax
  00169	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  0016c	51		 push	 ecx
  0016d	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  00170	52		 push	 edx
  00171	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00174	50		 push	 eax
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DCJCJGFK@SignedMinA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  0017a	e8 00 00 00 00	 call	 _printf
  0017f	83 c4 14	 add	 esp, 20			; 00000014H

; 32   : 	printf("SignedMinB_(%4d, %4d, %4d) = %4d\n\n", a, b, c, smin_b);

  00182	8b 45 b0	 mov	 eax, DWORD PTR _smin_b$[ebp]
  00185	50		 push	 eax
  00186	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  00189	51		 push	 ecx
  0018a	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  0018d	52		 push	 edx
  0018e	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00191	50		 push	 eax
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IDDECPAO@SignedMinB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  00197	e8 00 00 00 00	 call	 _printf
  0019c	83 c4 14	 add	 esp, 20			; 00000014H

; 33   : 
; 34   : 	// SignedMax example
; 35   : 	a = 10; b = 5; c = 3;

  0019f	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _a$[ebp], 10	; 0000000aH
  001a6	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _b$[ebp], 5
  001ad	c7 45 e0 03 00
	00 00		 mov	 DWORD PTR _c$[ebp], 3

; 36   : 	smax_a = SignedMaxA_(a, b, c);

  001b4	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  001bb	51		 push	 ecx
  001bc	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  001bf	52		 push	 edx
  001c0	e8 00 00 00 00	 call	 _SignedMaxA_
  001c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c8	89 45 d4	 mov	 DWORD PTR _smax_a$[ebp], eax

; 37   : 	smax_b = SignedMaxB_(a, b, c);

  001cb	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  001d2	51		 push	 ecx
  001d3	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  001d6	52		 push	 edx
  001d7	e8 00 00 00 00	 call	 _SignedMaxB_
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001df	89 45 c8	 mov	 DWORD PTR _smax_b$[ebp], eax

; 38   : 	printf("SignedMaxA_(%4d, %4d, %4d) = %4d\n", a, b, c, smax_a);

  001e2	8b 45 d4	 mov	 eax, DWORD PTR _smax_a$[ebp]
  001e5	50		 push	 eax
  001e6	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  001e9	51		 push	 ecx
  001ea	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  001ed	52		 push	 edx
  001ee	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  001f1	50		 push	 eax
  001f2	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GFJMMGBJ@SignedMaxA_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  001f7	e8 00 00 00 00	 call	 _printf
  001fc	83 c4 14	 add	 esp, 20			; 00000014H

; 39   : 	printf("SignedMaxB_(%4d, %4d, %4d) = %4d\n\n", a, b, c, smax_b);

  001ff	8b 45 c8	 mov	 eax, DWORD PTR _smax_b$[ebp]
  00202	50		 push	 eax
  00203	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  00206	51		 push	 ecx
  00207	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  0020a	52		 push	 edx
  0020b	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  0020e	50		 push	 eax
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GMLGDBHE@SignedMaxB_?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4@
  00214	e8 00 00 00 00	 call	 _printf
  00219	83 c4 14	 add	 esp, 20			; 00000014H

; 40   : 
; 41   : 	a = -3; b = 28; c = 15;

  0021c	c7 45 f8 fd ff
	ff ff		 mov	 DWORD PTR _a$[ebp], -3	; fffffffdH
  00223	c7 45 ec 1c 00
	00 00		 mov	 DWORD PTR _b$[ebp], 28	; 0000001cH
  0022a	c7 45 e0 0f 00
	00 00		 mov	 DWORD PTR _c$[ebp], 15	; 0000000fH

; 42   : 	smax_a = SignedMaxA_(a, b, c);

  00231	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  00234	50		 push	 eax
  00235	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  00238	51		 push	 ecx
  00239	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  0023c	52		 push	 edx
  0023d	e8 00 00 00 00	 call	 _SignedMaxA_
  00242	83 c4 0c	 add	 esp, 12			; 0000000cH
  00245	89 45 d4	 mov	 DWORD PTR _smax_a$[ebp], eax

; 43   : 	smax_b = SignedMaxB_(a, b, c);

  00248	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  0024b	50		 push	 eax
  0024c	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  0024f	51		 push	 ecx
  00250	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  00253	52		 push	 edx
  00254	e8 00 00 00 00	 call	 _SignedMaxB_
  00259	83 c4 0c	 add	 esp, 12			; 0000000cH
  0025c	89 45 c8	 mov	 DWORD PTR _smax_b$[ebp], eax

; 44   : 	printf("SignedMinA(%4d, %4d, %4d) = %4d\n", a, b, c, smax_a);

  0025f	8b 45 d4	 mov	 eax, DWORD PTR _smax_a$[ebp]
  00262	50		 push	 eax
  00263	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  00266	51		 push	 ecx
  00267	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  0026a	52		 push	 edx
  0026b	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  0026e	50		 push	 eax
  0026f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NLOIEBKD@SignedMinA?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@
  00274	e8 00 00 00 00	 call	 _printf
  00279	83 c4 14	 add	 esp, 20			; 00000014H

; 45   : 	printf("SignedMinB(%4d, %4d, %4d) = %4d\n\n", a, b, c, smax_b);

  0027c	8b 45 c8	 mov	 eax, DWORD PTR _smax_b$[ebp]
  0027f	50		 push	 eax
  00280	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  00283	51		 push	 ecx
  00284	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  00287	52		 push	 edx
  00288	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  0028b	50		 push	 eax
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@IAAGEEMK@SignedMinB?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@
  00291	e8 00 00 00 00	 call	 _printf
  00296	83 c4 14	 add	 esp, 20			; 00000014H

; 46   : 
; 47   : 	a = -25; b = -37; c = -17;

  00299	c7 45 f8 e7 ff
	ff ff		 mov	 DWORD PTR _a$[ebp], -25	; ffffffe7H
  002a0	c7 45 ec db ff
	ff ff		 mov	 DWORD PTR _b$[ebp], -37	; ffffffdbH
  002a7	c7 45 e0 ef ff
	ff ff		 mov	 DWORD PTR _c$[ebp], -17	; ffffffefH

; 48   : 	smax_a = SignedMaxA_(a, b, c);

  002ae	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  002b1	50		 push	 eax
  002b2	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  002b5	51		 push	 ecx
  002b6	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  002b9	52		 push	 edx
  002ba	e8 00 00 00 00	 call	 _SignedMaxA_
  002bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c2	89 45 d4	 mov	 DWORD PTR _smax_a$[ebp], eax

; 49   : 	smax_b = SignedMaxB_(a, b, c);

  002c5	8b 45 e0	 mov	 eax, DWORD PTR _c$[ebp]
  002c8	50		 push	 eax
  002c9	8b 4d ec	 mov	 ecx, DWORD PTR _b$[ebp]
  002cc	51		 push	 ecx
  002cd	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  002d0	52		 push	 edx
  002d1	e8 00 00 00 00	 call	 _SignedMaxB_
  002d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d9	89 45 c8	 mov	 DWORD PTR _smax_b$[ebp], eax

; 50   : 	printf("SignedMinA(%4d, %4d, %4d) = %4d\n", a, b, c, smax_a);

  002dc	8b 45 d4	 mov	 eax, DWORD PTR _smax_a$[ebp]
  002df	50		 push	 eax
  002e0	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  002e3	51		 push	 ecx
  002e4	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  002e7	52		 push	 edx
  002e8	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  002eb	50		 push	 eax
  002ec	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@NLOIEBKD@SignedMinA?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@
  002f1	e8 00 00 00 00	 call	 _printf
  002f6	83 c4 14	 add	 esp, 20			; 00000014H

; 51   : 	printf("SignedMinB(%4d, %4d, %4d) = %4d\n\n", a, b, c, smax_b);

  002f9	8b 45 c8	 mov	 eax, DWORD PTR _smax_b$[ebp]
  002fc	50		 push	 eax
  002fd	8b 4d e0	 mov	 ecx, DWORD PTR _c$[ebp]
  00300	51		 push	 ecx
  00301	8b 55 ec	 mov	 edx, DWORD PTR _b$[ebp]
  00304	52		 push	 edx
  00305	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00308	50		 push	 eax
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@IAAGEEMK@SignedMinB?$CI?$CF4d?0?5?$CF4d?0?5?$CF4d?$CJ?5?$DN?5?$CF4d@
  0030e	e8 00 00 00 00	 call	 _printf
  00313	83 c4 14	 add	 esp, 20			; 00000014H

; 52   : 
; 53   : 
; 54   : 	a = 5; b = 5;

  00316	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _a$[ebp], 5
  0031d	c7 45 ec 05 00
	00 00		 mov	 DWORD PTR _b$[ebp], 5

; 55   : 	printf("SignedIsEq: %d\n", SignedIsEq_(a, b));

  00324	8b 45 ec	 mov	 eax, DWORD PTR _b$[ebp]
  00327	50		 push	 eax
  00328	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  0032b	51		 push	 ecx
  0032c	e8 00 00 00 00	 call	 _SignedIsEq_
  00331	83 c4 08	 add	 esp, 8
  00334	0f b6 d0	 movzx	 edx, al
  00337	52		 push	 edx
  00338	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ENHOIMMM@SignedIsEq?3?5?$CFd?6@
  0033d	e8 00 00 00 00	 call	 _printf
  00342	83 c4 08	 add	 esp, 8

; 56   : 
; 57   : 	return (0);

  00345	33 c0		 xor	 eax, eax

; 58   : }	

  00347	5f		 pop	 edi
  00348	5e		 pop	 esi
  00349	5b		 pop	 ebx
  0034a	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00350	3b ec		 cmp	 ebp, esp
  00352	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00357	8b e5		 mov	 esp, ebp
  00359	5d		 pop	 ebp
  0035a	c3		 ret	 0
_wmain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
