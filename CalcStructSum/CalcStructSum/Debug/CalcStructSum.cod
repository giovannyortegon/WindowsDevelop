; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27048.0 

	TITLE	C:\Users\Pentester\source\repos\CalcStructSum\CalcStructSum\CalcStructSum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6B9C2DC0_tchar@h DB 01H
__A26D55E2_calcstructsum@cpp DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?CalcStructSumCpp@@YA_JPBUTestStruct@@@Z	; CalcStructSumCpp
PUBLIC	_wmain
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BG@PKCFGMLN@Input?3?5?$CFd?5?$CFd?5?$CFd?5?$CFlld?6@ ; `string'
PUBLIC	??_C@_0M@FBAKHEFJ@sum1?3?5?$CFlld?6@		; `string'
PUBLIC	??_C@_0M@GIIHEIJM@sum2?3?5?$CFlld?6@		; `string'
PUBLIC	??_C@_0BK@PFBCOPGP@Sum?5verify?5check?5failed?$CB?6@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_CalcStructSum_:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BK@PFBCOPGP@Sum?5verify?5check?5failed?$CB?6@
CONST	SEGMENT
??_C@_0BK@PFBCOPGP@Sum?5verify?5check?5failed?$CB?6@ DB 'Sum verify check'
	DB	' failed!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GIIHEIJM@sum2?3?5?$CFlld?6@
CONST	SEGMENT
??_C@_0M@GIIHEIJM@sum2?3?5?$CFlld?6@ DB 'sum2: %lld', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FBAKHEFJ@sum1?3?5?$CFlld?6@
CONST	SEGMENT
??_C@_0M@FBAKHEFJ@sum1?3?5?$CFlld?6@ DB 'sum1: %lld', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PKCFGMLN@Input?3?5?$CFd?5?$CFd?5?$CFd?5?$CFlld?6@
CONST	SEGMENT
??_C@_0BG@PKCFGMLN@Input?3?5?$CFd?5?$CFd?5?$CFd?5?$CFlld?6@ DB 'Input: %d'
	DB	' %d %d %lld', 0aH, 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\calcstructsum\calcstructsum\calcstructsum.cpp
;	COMDAT _wmain
_TEXT	SEGMENT
_sum2$ = -56						; size = 8
_sum1$ = -40						; size = 8
_ts$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 8    : int _tmain(int argc, _TCHAR * argv[]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __A26D55E2_calcstructsum@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 9    : 	TestStruct ts;
; 10   : 
; 11   : 	ts.Val8 = -100;

  00032	c6 45 e8 9c	 mov	 BYTE PTR _ts$[ebp], -100 ; ffffff9cH

; 12   : 	ts.Val16 = 2000;

  00036	b8 d0 07 00 00	 mov	 eax, 2000		; 000007d0H
  0003b	66 89 45 ea	 mov	 WORD PTR _ts$[ebp+2], ax

; 13   : 	ts.Val32 = -300000;

  0003f	c7 45 ec 20 6c
	fb ff		 mov	 DWORD PTR _ts$[ebp+4], -300000 ; fffb6c20H

; 14   : 	ts.Val64 = 40000000000;

  00046	c7 45 f0 00 90
	2f 50		 mov	 DWORD PTR _ts$[ebp+8], 1345294336 ; 502f9000H
  0004d	c7 45 f4 09 00
	00 00		 mov	 DWORD PTR _ts$[ebp+12], 9

; 15   : 
; 16   : 	__int64 sum1 = CalcStructSumCpp(&ts);

  00054	8d 45 e8	 lea	 eax, DWORD PTR _ts$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?CalcStructSumCpp@@YA_JPBUTestStruct@@@Z ; CalcStructSumCpp
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 d8	 mov	 DWORD PTR _sum1$[ebp], eax
  00063	89 55 dc	 mov	 DWORD PTR _sum1$[ebp+4], edx

; 17   : 	__int64 sum2 = CalcStructSum_(&ts);

  00066	8d 45 e8	 lea	 eax, DWORD PTR _ts$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _CalcStructSum_
  0006f	83 c4 04	 add	 esp, 4
  00072	89 45 c8	 mov	 DWORD PTR _sum2$[ebp], eax
  00075	89 55 cc	 mov	 DWORD PTR _sum2$[ebp+4], edx

; 18   : 
; 19   : 	printf("Input: %d %d %d %lld\n", ts.Val8, ts.Val16, ts.Val32, ts.Val64);

  00078	8b 45 f4	 mov	 eax, DWORD PTR _ts$[ebp+12]
  0007b	50		 push	 eax
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _ts$[ebp+8]
  0007f	51		 push	 ecx
  00080	8b 55 ec	 mov	 edx, DWORD PTR _ts$[ebp+4]
  00083	52		 push	 edx
  00084	0f bf 45 ea	 movsx	 eax, WORD PTR _ts$[ebp+2]
  00088	50		 push	 eax
  00089	0f be 4d e8	 movsx	 ecx, BYTE PTR _ts$[ebp]
  0008d	51		 push	 ecx
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PKCFGMLN@Input?3?5?$CFd?5?$CFd?5?$CFd?5?$CFlld?6@
  00093	e8 00 00 00 00	 call	 _printf
  00098	83 c4 18	 add	 esp, 24			; 00000018H

; 20   : 	printf("sum1: %lld\n", sum1);

  0009b	8b 45 dc	 mov	 eax, DWORD PTR _sum1$[ebp+4]
  0009e	50		 push	 eax
  0009f	8b 4d d8	 mov	 ecx, DWORD PTR _sum1$[ebp]
  000a2	51		 push	 ecx
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FBAKHEFJ@sum1?3?5?$CFlld?6@
  000a8	e8 00 00 00 00	 call	 _printf
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : 	printf("sum2: %lld\n", sum2);

  000b0	8b 45 cc	 mov	 eax, DWORD PTR _sum2$[ebp+4]
  000b3	50		 push	 eax
  000b4	8b 4d c8	 mov	 ecx, DWORD PTR _sum2$[ebp]
  000b7	51		 push	 ecx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GIIHEIJM@sum2?3?5?$CFlld?6@
  000bd	e8 00 00 00 00	 call	 _printf
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 22   : 	if (sum1 != sum2)

  000c5	8b 45 d8	 mov	 eax, DWORD PTR _sum1$[ebp]
  000c8	3b 45 c8	 cmp	 eax, DWORD PTR _sum2$[ebp]
  000cb	75 08		 jne	 SHORT $LN4@wmain
  000cd	8b 4d dc	 mov	 ecx, DWORD PTR _sum1$[ebp+4]
  000d0	3b 4d cc	 cmp	 ecx, DWORD PTR _sum2$[ebp+4]
  000d3	74 0d		 je	 SHORT $LN2@wmain
$LN4@wmain:
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PFBCOPGP@Sum?5verify?5check?5failed?$CB?6@
  000da	e8 00 00 00 00	 call	 _printf
  000df	83 c4 04	 add	 esp, 4
$LN2@wmain:

; 23   : 
; 24   : 	return (0);

  000e2	33 c0		 xor	 eax, eax

; 25   : }

  000e4	52		 push	 edx
  000e5	8b cd		 mov	 ecx, ebp
  000e7	50		 push	 eax
  000e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@wmain
  000ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f3	58		 pop	 eax
  000f4	5a		 pop	 edx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
  00113	90		 npad	 1
$LN7@wmain:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN6@wmain
$LN6@wmain:
  0011c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00120	10 00 00 00	 DD	 16			; 00000010H
  00124	00 00 00 00	 DD	 $LN5@wmain
$LN5@wmain:
  00128	74		 DB	 116			; 00000074H
  00129	73		 DB	 115			; 00000073H
  0012a	00		 DB	 0
_wmain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\pentester\source\repos\calcstructsum\calcstructsum\calcstructsum.cpp
;	COMDAT ?CalcStructSumCpp@@YA_JPBUTestStruct@@@Z
_TEXT	SEGMENT
_ts$ = 8						; size = 4
?CalcStructSumCpp@@YA_JPBUTestStruct@@@Z PROC		; CalcStructSumCpp, COMDAT

; 27   : __int64 CalcStructSumCpp(const TestStruct * ts) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A26D55E2_calcstructsum@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 28   : 	return ts->Val8 + ts->Val16 + ts->Val32 + ts->Val64;

  00028	8b 45 08	 mov	 eax, DWORD PTR _ts$[ebp]
  0002b	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _ts$[ebp]
  00031	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  00035	03 c2		 add	 eax, edx
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _ts$[ebp]
  0003a	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0003d	99		 cdq
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _ts$[ebp]
  00041	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00044	13 51 0c	 adc	 edx, DWORD PTR [ecx+12]

; 29   : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?CalcStructSumCpp@@YA_JPBUTestStruct@@@Z ENDP		; CalcStructSumCpp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A452D4A0_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
